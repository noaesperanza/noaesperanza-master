// codeEditorAgent.ts - Vers√£o browser-compatible
export const codeEditorAgent = {
  async executarComando(mensagem: string): Promise<string> {
    const lower = mensagem.toLowerCase()

    if (lower.includes('listar arquivos')) {
      return this.listarArquivos()
    }

    if (lower.includes('editar')) {
      return this.editarArquivo(mensagem)
    }

    return 'üõ†Ô∏è Comando de edi√ß√£o n√£o reconhecido. Tente: "listar arquivos" ou "editar o arquivo X com o conte√∫do Y".'
  },

  async listarArquivos(): Promise<string> {
    // Simula√ß√£o para ambiente browser
    return `üìÇ Arquivos dispon√≠veis (simula√ß√£o):
    - src/App.tsx
    - src/pages/Home.tsx
    - src/components/Sidebar.tsx
    - src/services/supabaseService.ts
    - src/gpt/noaGPT.ts`
  },

  async editarArquivo(mensagem: string): Promise<string> {
    const regex = /editar o arquivo (.+?) com o conte√∫do (.+)/i
    const match = mensagem.match(regex)

    if (!match || match.length < 3) {
      return '‚ö†Ô∏è Formato inv√°lido. Use: "editar o arquivo Home.tsx com o conte√∫do Novo conte√∫do..."'
    }

    const nomeArquivo = match[1].trim()
    const novoConteudo = match[2].trim()

    // Simula√ß√£o para ambiente browser
    return `‚úÖ Arquivo "${nomeArquivo}" editado com sucesso (simula√ß√£o).
    Conte√∫do: ${novoConteudo.substring(0, 100)}...
    
    üí° Nota: Em ambiente de produ√ß√£o, isso seria integrado com um sistema de arquivos real.`
  }
}
