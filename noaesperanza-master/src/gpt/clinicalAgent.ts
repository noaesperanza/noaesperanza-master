// clinicalAgent.ts

interface Avaliacao {
    titulo: string
    conteudo: string
  }
  
  const bancoDeAvaliacoes: Avaliacao[] = []
  
  export const clinicalAgent = {
    async executarAcao(message: string): Promise<string> {
      const lower = message.toLowerCase().trim()
  
      // Criar avalia√ß√£o
      if (lower.includes('criar avalia√ß√£o')) {
        const match = message.match(/criar avalia√ß√£o (.+?) com o conte√∫do (.+)/i)
        if (!match || match.length < 3) {
          return '‚ö†Ô∏è Para criar uma avalia√ß√£o, diga: "criar avalia√ß√£o Nome com o conte√∫do Texto..."'
        }
  
        const titulo = match[1].trim()
        const conteudo = match[2].trim()
        bancoDeAvaliacoes.push({ titulo, conteudo })
  
        return `‚úÖ Avalia√ß√£o "${titulo}" criada com sucesso.`
      }
  
      // Editar avalia√ß√£o
      if (lower.includes('editar avalia√ß√£o')) {
        const match = message.match(/editar avalia√ß√£o (.+?) com o conte√∫do (.+)/i)
        if (!match || match.length < 3) {
          return '‚ö†Ô∏è Para editar uma avalia√ß√£o, diga: "editar avalia√ß√£o Nome com o conte√∫do Texto..."'
        }
  
        const titulo = match[1].trim()
        const novoConteudo = match[2].trim()
        const avaliacao = bancoDeAvaliacoes.find(a => a.titulo === titulo)
  
        if (!avaliacao) {
          return `‚ùå Avalia√ß√£o "${titulo}" n√£o encontrada.`
        }
  
        avaliacao.conteudo = novoConteudo
        return `‚úÖ Avalia√ß√£o "${titulo}" atualizada com sucesso.`
      }
  
      // Listar avalia√ß√µes
      if (lower.includes('listar avalia√ß√µes')) {
        if (bancoDeAvaliacoes.length === 0) {
          return 'üì≠ Nenhuma avalia√ß√£o dispon√≠vel ainda.'
        }
  
        const lista = bancoDeAvaliacoes
          .map((a, i) => `${i + 1}. ${a.titulo}`)
          .join('\n')
  
        return `üìã Avalia√ß√µes dispon√≠veis:\n${lista}`
      }
  
      return '‚ö†Ô∏è Comando de avalia√ß√£o n√£o reconhecido. Use: criar, editar ou listar avalia√ß√µes.'
    }
  }
  